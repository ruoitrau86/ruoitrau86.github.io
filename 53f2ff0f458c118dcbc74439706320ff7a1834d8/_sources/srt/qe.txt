.. image:: ../figs/qe.jpg

Quantum ESPRESSO
==============================================

.. _scf:

**Input file**: scf.in

This example tests lambda_weight.x for the Nb case.
You can also find the whole options of lambda_weight.x in lambda_weight.f90.
    
Calculate the density of states using tetrahedron method with fine k mesh
-------------------------------------------------------------------------

pw.x < scf_dos.in > scf_dos.out


.. code-block :: bash
    
     &control
        calculation='scf'
        restart_mode='from_scratch',
        prefix='nb',
        pseudo_dir = '~/PWSCF/pseudo',
        outdir='./work'
    	disk_io='low'
    	wf_collect=.true.
     /
     &system
        ibrav=  3, celldm(1) = 6.246, nat=  1, ntyp= 1,
        ecutwfc = 30.0, 
    	ecutrho = 300,
        occupations='tetrahedra',
     /
     &electrons
        conv_thr =  1.0d-10
        mixing_beta = 0.7
     /
     &ions
     /
     &cell
     /
    ATOMIC_SPECIES
    Nb   92.90638   Nb.pbe-nsp-van.UPF
    ATOMIC_POSITIONS
    Nb 0.00 0.00 0.00 
    K_POINTS {automatic}
    50 50 50  0 0 0

dos.x < dos.in > dos.out

.. code-block :: python

    &dos
      prefix = 'nb'
      outdir = './work'
      Emin = 17.9095
      Emax = 17.9095
    /

Calculate the electron-phonon couplings using 8x8x8 k and q-mesh
----------------------------------------------------------------
   pw.x < scf.in > scf.out

.. code-block :: python

     &control
        calculation='scf'
        restart_mode='from_scratch',
        prefix='nb',
        pseudo_dir = '~/PWSCF/pseudo',
        outdir='./work'
    	disk_io='low'
     /
     &system
        ibrav=  3, celldm(1) = 6.246, nat=  1, ntyp= 1,
        ecutwfc = 30.0, 
    	ecutrho = 300,
        occupations='smearing',
        smearing='methfessel-paxton',
        degauss=0.025,
     /
     &electrons
        conv_thr =  1.0d-10
        mixing_beta = 0.7
     /
     &ions
     /
     &cell
     /
    ATOMIC_SPECIES
     Nb   92.90638   Nb.pbe-nsp-van.UPF
    ATOMIC_POSITIONS
     Nb 0.00 0.00 0.00 
    K_POINTS {automatic}
     16 16 16  0 0 0

pw.x < nscf.in > nscf.out

.. code-block:: python

     &control
        calculation='nscf'
        restart_mode='from_scratch',
        prefix='nb',
        pseudo_dir = '~/PWSCF/pseudo',
        outdir='./work'
    	disk_io='low'
     /
     &system
        ibrav=  3, celldm(1) = 6.246, nat=  1, ntyp= 1,
        ecutwfc = 30.0, 
    	ecutrho = 300,
        occupations='smearing',
        smearing='methfessel-paxton',
        degauss=0.025,
     /
     &electrons
        conv_thr =  1.0d-10
        mixing_beta = 0.7
     /
     &ions
     /
     &cell
     /
    ATOMIC_SPECIES
     Nb   92.90638   Nb.pbe-nsp-van.UPF
    ATOMIC_POSITIONS
     Nb 0.00 0.00 0.00 
    K_POINTS {automatic}
     8 8 8  0 0 0

ph.x < elph.in > elph.out

.. code-block:: python

    Electron-phonon coefficients
     &inputph
      tr2_ph=1.0d-16,
      prefix='nb',
      fildvscf='nbdv',
      fildyn='nb.dyn',
      outdir='./work'
      reduce_io=.true.
      electron_phonon='simple'
      trans=.true.,
      ldisp=.true.
      el_ph_sigma = 0.005d0
      nq1=8, nq2=8, nq3=8
     /

Calculate lambda and omega_log using the Gaussian smearing method
-----------------------------------------------------------------
   lambda_weight.x < lambda.in > lambda.out

.. code-block:: python

    &input
      filelph = 'nb.dyn'
      mustar = 0.20
    /
    29
   0.0000000   0.0000000   0.0000000  0.0039062
   0.0000000  -0.1250000   0.1250000  0.0468750
   0.0000000  -0.2500000   0.2500000  0.0468750
   0.0000000  -0.3750000   0.3750000  0.0468750
   0.0000000   0.5000000  -0.5000000  0.0234375
  -0.1250000  -0.1250000   0.2500000  0.0937500
  -0.1250000  -0.2500000   0.3750000  0.1875000
  -0.1250000   0.6250000  -0.5000000  0.1875000
  -0.2500000   0.7500000  -0.5000000  0.0937500
  -0.2500000   0.6250000  -0.3750000  0.0937500
   0.0000000   0.0000000   0.2500000  0.0234375
   0.0000000  -0.1250000   0.3750000  0.0937500
   0.0000000  -0.2500000   0.5000000  0.0937500
   0.0000000   0.6250000  -0.3750000  0.0468750
  -0.1250000  -0.1250000   0.5000000  0.0937500
  -0.1250000   0.7500000  -0.3750000  0.1875000
  -0.2500000   0.2500000   0.2500000  0.0312500
  -0.2500000   0.7500000  -0.2500000  0.0312500
   0.6250000  -0.6250000   0.2500000  0.0937500
   0.5000000  -0.5000000   0.2500000  0.0468750
   0.5000000  -0.6250000   0.3750000  0.0937500
   0.0000000   0.0000000   0.5000000  0.0234375
   0.0000000  -0.1250000   0.6250000  0.0937500
   0.0000000   0.7500000  -0.2500000  0.0468750
  -0.1250000   0.8750000  -0.2500000  0.0937500
   0.5000000  -0.5000000   0.5000000  0.0078125
   0.0000000   0.0000000   0.7500000  0.0234375
   0.0000000   0.8750000  -0.1250000  0.0468750
   0.0000000   0.0000000  -1.0000000  0.0039062


Calculate lambda and omega_log using the weighted average method
----------------------------------------------------------------
lambda_weight.x < lambda_weight.in > lambda_weight.out

.. code-block:: python


        &input
          filelph = 'nb.dyn'
          mustar = 0.20
          DOStetra = 1.487d0   ! DOS obtained by tetrahedron method
        /
        29
        0.0000000   0.0000000   0.0000000  0.0039062
        0.0000000  -0.1250000   0.1250000  0.0468750
        0.0000000  -0.2500000   0.2500000  0.0468750
        0.0000000  -0.3750000   0.3750000  0.0468750
        0.0000000   0.5000000  -0.5000000  0.0234375
        -0.1250000  -0.1250000   0.2500000  0.0937500
        -0.1250000  -0.2500000   0.3750000  0.1875000
        -0.1250000   0.6250000  -0.5000000  0.1875000
        -0.2500000   0.7500000  -0.5000000  0.0937500
        -0.2500000   0.6250000  -0.3750000  0.0937500
        0.0000000   0.0000000   0.2500000  0.0234375
        0.0000000  -0.1250000   0.3750000  0.0937500
        0.0000000  -0.2500000   0.5000000  0.0937500
        0.0000000   0.6250000  -0.3750000  0.0468750
        -0.1250000  -0.1250000   0.5000000  0.0937500
        -0.1250000   0.7500000  -0.3750000  0.1875000
        -0.2500000   0.2500000   0.2500000  0.0312500
        -0.2500000   0.7500000  -0.2500000  0.0312500
        0.6250000  -0.6250000   0.2500000  0.0937500
        0.5000000  -0.5000000   0.2500000  0.0468750
        0.5000000  -0.6250000   0.3750000  0.0937500
        0.0000000   0.0000000   0.5000000  0.0234375
        0.0000000  -0.1250000   0.6250000  0.0937500
        0.0000000   0.7500000  -0.2500000  0.0468750
        -0.1250000   0.8750000  -0.2500000  0.0937500
        0.5000000  -0.5000000   0.5000000  0.0078125
        0.0000000   0.0000000   0.7500000  0.0234375
        0.0000000   0.8750000  -0.1250000  0.0468750
        0.0000000   0.0000000  -1.0000000  0.0039062    

.. figure:: ../figs/lambda_weight.png
